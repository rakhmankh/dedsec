# etl/visualize.py
import pandas as pd
import numpy as np
import h3
from geopy.distance import geodesic
from scipy.optimize import linear_sum_assignment
import os

print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑...")
df_pred = pd.read_csv("data/predictions.csv")

# –ë–µ—Ä—ë–º —Ç–æ–ø-10 –∑–æ–Ω —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Å–ø—Ä–æ—Å–æ–º
hotspots = df_pred.sort_values("predicted", ascending=False).head(10).copy()
hotspots["lat"] = hotspots["h3"].apply(lambda h: h3.cell_to_latlng(h)[0])
hotspots["lng"] = hotspots["h3"].apply(lambda h: h3.cell_to_latlng(h)[1])

# –ü–∞—Ä–∞–º–µ—Ç—Ä: —Å–∫–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
N_DRIVERS = 100

print(f"üöñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º {N_DRIVERS} –≤–æ–¥–∏—Ç–µ–ª–µ–π...")
drivers = pd.DataFrame({
    "driver_id": [f"d{i}" for i in range(N_DRIVERS)],
    "lat": np.random.uniform(51.0, 51.25, N_DRIVERS),   # –ê—Å—Ç–∞–Ω–∞ bbox
    "lng": np.random.uniform(71.3, 71.6, N_DRIVERS)
})

# –°—Ç—Ä–æ–∏–º –º–∞—Ç—Ä–∏—Ü—É —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (distance / demand)
cost_matrix = np.zeros((len(drivers), len(hotspots)))
for i, d in drivers.iterrows():
    for j, z in hotspots.iterrows():
        dist = geodesic((d.lat, d.lng), (z.lat, z.lng)).km
        cost_matrix[i, j] = dist / (z.predicted + 1)

# –†–µ—à–∞–µ–º –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
print("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π...")
row_ind, col_ind = linear_sum_assignment(cost_matrix)

assignments = []
for r, c in zip(row_ind, col_ind):
    driver = drivers.iloc[r]
    zone = hotspots.iloc[c]
    assignments.append({
        "driver_id": driver.driver_id,
        "driver_lat": driver.lat,
        "driver_lng": driver.lng,
        "zone_h3": zone.h3,
        "zone_lat": zone.lat,
        "zone_lng": zone.lng,
        "distance_km": geodesic((driver.lat, driver.lng), (zone.lat, zone.lng)).km,
        "zone_predicted": zone.predicted
    })

df_assign = pd.DataFrame(assignments)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
os.makedirs("data", exist_ok=True)
df_assign.to_csv("data/assignments.csv", index=False)

print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: data/assignments.csv (—Å—Ç—Ä–æ–∫: {len(df_assign)})")
print(df_assign.head())
